{"version":3,"sources":["components/spiner.js","components/content.js","App.js","serviceWorker.js","index.js"],"names":["Spiner","className","viewBox","cx","cy","r","fill","strokeWidth","Content","tasks","appClose","endsAt","timeNow","timeEnd","moment","date","diff","format","map","item","key","type","style","width","progress","onClick","App","state","close","content","setState","time","fetch","response","json","data","this","slice","fetchData","setInterval","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAEaA,EAAU,kBACrB,yBAAKC,UAAU,UAAUC,QAAQ,aAC/B,4BACED,UAAU,OACVE,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,OACLC,YAAY,Q,gBC6CHC,EApDC,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAEpCC,EAAUC,IAAOH,GACjBI,EAAOD,IAAOD,EAAQG,KAAKJ,IAAUK,OAF5B,sBAIf,OACE,yBAAKhB,UAAU,cAEb,0BAAMA,UAAU,QACd,2BAAIc,GACJ,uBAAGd,UAAU,cACX,0DACA,gEACA,gEACA,wEAGHQ,EAAMS,KAAI,SAAAC,GAAI,OACb,0BAAMlB,UAAU,MAAMmB,IAAKD,EAAKE,MAE9B,yBAAKpB,UAAS,cAASkB,EAAKE,QAE5B,yBAAKpB,UAAU,kBACE,SAAdkB,EAAKE,KACJ,uQACE,KACW,UAAdF,EAAKE,KACJ,iPACE,KACW,gBAAdF,EAAKE,KACJ,8LACE,KAEJ,yBAAKpB,UAAU,gBACb,yBACEA,UAAU,WACVqB,MAAO,CAAEC,MAAM,GAAD,OAAKJ,EAAKK,SAAV,UAKD,MAAlBL,EAAKK,SACJ,4BAAQC,QAAS,kBAAMf,GAAS,IAAOT,UAAU,UAAjD,qGAGE,WCoBCyB,E,2MA9DbC,MAAQ,CACNhB,OAAQ,GACRF,MAAO,GACPmB,OAAO,EACPC,SAAS,EACTjB,QAAS,M,EAeXF,SAAW,SAAAkB,GACT,EAAKE,SAAS,CAAEF,W,EAGlBG,KAAO,WACL,EAAKD,SAAS,CAAElB,QAASE,S,6MAhBFkB,MAAM,8C,cAAvBC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKN,SAAS,CACZnB,OAAQwB,EAAKxB,OAEbF,MAAO0B,EAAK1B,MAAM4B,MAAM,EAAG,GAC3BR,SAAS,EACTjB,QAAS,O,gJAYQ,IAAD,OAClBwB,KAAKE,YACLC,aAAY,WACV,EAAKR,SACJ,O,+BAGK,IAAD,EACmCK,KAAKT,MAAvClB,EADD,EACCA,MAAOmB,EADR,EACQA,MAAOC,EADf,EACeA,QAASlB,EADxB,EACwBA,OAC/B,OACE,yBAAKV,UAAU,QACb,yBAAKA,UAAU,oBACZ2B,EAAQ,KACP,kBAAC,WAAD,KACGC,EACC,kBAAC,WAAD,KACE,yBAAK5B,UAAU,UAAf,KACA,kBAAC,EAAD,CACEQ,MAAOA,EACPC,SAAU0B,KAAK1B,SACfC,OAAQA,KAIZ,kBAAC,EAAD,a,GArDE6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f85f7c28.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Spiner =  () => (\r\n  <svg className=\"spinner\" viewBox=\"0 0 50 50\">\r\n    <circle\r\n      className=\"path\"\r\n      cx=\"25\"\r\n      cy=\"25\"\r\n      r=\"20\"\r\n      fill=\"none\"\r\n      strokeWidth=\"5\"\r\n    ></circle>\r\n  </svg>\r\n);\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst Content = ({ tasks, appClose, endsAt, timeNow }) => {\r\n  const format = \"DDD : HH : mm : ss\";\r\n  const timeEnd = moment(endsAt);\r\n  const date = moment(timeEnd.diff(timeNow)).format(format);\r\n\r\n  return (\r\n    <div className=\"background\">\r\n      {/* отоброжение таймера */}\r\n      <span className=\"time\">\r\n        <p>{date}</p>\r\n        <p className=\"time-title\">\r\n          <span>дней</span>\r\n          <span>часов</span>\r\n          <span>минут</span>\r\n          <span>секунд</span>\r\n        </p>\r\n      </span>\r\n      {tasks.map(item => (\r\n        <span className=\"row\" key={item.type}>\r\n          {/*  картинка*/}\r\n          <div className={`img-${item.type}`} />\r\n          {/* подпись блока в зависимости от type */}\r\n          <div className=\"progress-block\">\r\n            {item.type === \"time\" ? (\r\n              <p>Выйграть три игры, каждую менее чем за 3 минуты</p>\r\n            ) : null}\r\n            {item.type === \"kings\" ? (\r\n              <p>Выйграть три игры, разложив всех королей</p>\r\n            ) : null}\r\n            {item.type === \"tournaments\" ? (\r\n              <p>Выйграть пять турниров подряд</p>\r\n            ) : null}\r\n            {/* прогресс бар */}\r\n            <div className=\"progress-bar\">\r\n              <div\r\n                className=\"progress\"\r\n                style={{ width: `${item.progress}%` }}\r\n              ></div>\r\n            </div>\r\n            {/* возникающая кнопка */}\r\n          </div>\r\n          {item.progress === 100 ? (\r\n            <button onClick={() => appClose(true)} className=\"button\">\r\n              Поставить рубашку\r\n            </button>\r\n          ) : null}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Spiner } from \"./components/spiner\";\r\nimport Content from \"./components/content\";\r\nimport moment from \"moment\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    endsAt: \"\",\r\n    tasks: [],\r\n    close: false,\r\n    content: false,\r\n    timeNow: null\r\n  };\r\n\r\n  async fetchData() {\r\n    const response = await fetch(\"http://sol-tst.herokuapp.com/api/v1/tasks/\");\r\n    const data = await response.json();\r\n    this.setState({\r\n      endsAt: data.endsAt,\r\n      // первые три эллемента массива\r\n      tasks: data.tasks.slice(0, 3),\r\n      content: true,\r\n      timeNow: null\r\n    });\r\n  }\r\n\r\n  appClose = close => {\r\n    this.setState({ close });\r\n  };\r\n\r\n  time = () => {\r\n    this.setState({ timeNow: moment() });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n    setInterval(() => {\r\n      this.time();\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { tasks, close, content, endsAt } = this.state;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"backgroundScreen\">\r\n          {close ? null : (\r\n            <Fragment>\r\n              {content ? (\r\n                <Fragment>\r\n                  <div className=\"header\"> </div>\r\n                  <Content\r\n                    tasks={tasks}\r\n                    appClose={this.appClose}\r\n                    endsAt={endsAt}\r\n                  />\r\n                </Fragment>\r\n              ) : (\r\n                <Spiner />\r\n              )}\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}